<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-file="http://www.springframework.org/schema/integration/file"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:int-mail="http://www.springframework.org/schema/integration/mail"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/integration
http://www.springframework.org/schema/integration/spring-integration.xsd
http://www.springframework.org/schema/integration/file
http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task.xsd
http://www.springframework.org/schema/integration/mail
http://www.springframework.org/schema/integration/mail/spring-integration-mail.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util.xsd">

	<!--polling the folder "file:input" each 5 seconds -->
	<int-file:inbound-channel-adapter id="filesIn"
		directory="file:input" filename-pattern="*.*" prevent-duplicates="true">
		<int:poller id="poller"  cron="0/5 * * * * *"
			max-messages-per-poll="2" />
	</int-file:inbound-channel-adapter>

	<!-- Chaining the Message to # of steps: 1- Splitting Files, 2-Enrich the 
		Header message,3-Delete Source File and convert it into byte array -->
	<int:chain input-channel="filesIn" output-channel="routingChannel">
		<int:splitter id="fileSplitter" />
		<int:header-enricher id="HeaderEnricher">
			<int:header name="file_extension"
				expression="payload.getName().substring(payload.getName().lastIndexOf('.'))" />
		</int:header-enricher>
		<int-file:file-to-bytes-transformer
			id="fileToData" delete-files="true" />
	</int:chain>

	<!-- Logging messages coming to the routing channel -->
	<int:channel id="routingChannel">
		<int:interceptors>
			<int:wire-tap channel="loggingChannel" />
		</int:interceptors>
	</int:channel>
	<int:logging-channel-adapter id="loggingChannel"
		level="INFO"
		expression="'Processing file: ' + headers.file_name + ' (' + payload.length + ' bytes) '" />

	<!-- Messages Rooting based on the extension of input file -->
	<int:header-value-router id="fileTypeRouter"
		default-output-channel="otherFilesOut" header-name="file_extension"
		input-channel="routingChannel" resolution-required="false">
		<int:mapping value=".csv" channel="parallelMessageChannel" />
	</int:header-value-router>

	<!-- Other files will be copied to others folder -->
	<int-file:outbound-channel-adapter
		id="otherFilesOut" directory="file:others" delete-source-files="true" />

	<!-- Parallel Run & Copying the message into multiple channels -->
	<task:executor id="copyMessageExecutor" pool-size="3" />
	<int:publish-subscribe-channel id="parallelMessageChannel"
		task-executor="copyMessageExecutor" />

	<!-- First Subscriber : Send Mail with the CSV file in attachment -->
	<int-mail:header-enricher id="mailEnricher"
		input-channel="parallelMessageChannel" output-channel="notifyProcessingFile">
		<int-mail:from value="tarak.commerce@gmail.com" />
		<int-mail:subject
			expression="'The Csv File: ' + headers.file_name +' was processed in success !'" />
		<int-mail:to value="tarak.akik@gmail.com" />
		<int-mail:attachment-filename expression="headers.file_name" />
	</int-mail:header-enricher>
	<int-mail:outbound-channel-adapter
		id="notifyProcessingFile" host="smtp.gmail.com" username="[CHANGE_IT]"
		password="[CHANGE_IT]" java-mail-properties="javaMailProperties" />
	<util:properties id="javaMailProperties">
		<prop key="mail.smtp.starttls.enable">true</prop>
		<prop key="mail.debug">true</prop>
		<prop key="mail.transport.protocol">smtp</prop>
		<prop key="mail.smtp.host">smtp.gmail.com</prop>
		<prop key="mail.smtp.port">587</prop>
	</util:properties>

	<!-- Second Subscriber : Print CSV File Content -->
	<int:service-activator id="printCsv"
		input-channel="parallelMessageChannel" ref="csvFileReader" method="printCsv" />
	<!-- Third Subscriber : Archiving File -->
	<int:transformer input-channel="parallelMessageChannel"
		id="data2zip" output-channel="zipFilesOut" ref="byteArrayToZipTransformer"
		method="zip" />
	<int-file:outbound-channel-adapter
		id="zipFilesOut" directory="file:archive" delete-source-files="true" />

</beans>